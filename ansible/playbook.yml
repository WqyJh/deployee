# Directories structure of deployment
# /var
# ├── lib
# │   ├── local_settings
# │   │   └── project
# │   │       ├── production
# │   │       ├── staging
# │   │       └── test
# │   └── venv
# │   │   └── project
# │   │       ├── production
# |   |       |   └── <hash>
# │   │       ├── staging
# |   |       |   └── <hash>
# │   │       └── test
# ├── log
# │   └── project
# │       ├── production
# │       ├── staging
# │       └── test
# ├── media
# │   └── project
# │       ├── production
# │       ├── staging
# │       └── test
# ├── static
# │   └── project
# │       ├── production
# │       ├── staging
# │       └── test
# └── www
# │   └── project
# │       ├── production
# |       |   └── <hash>
# │       ├── staging
# |       |   └── <hash>
# │       └── test

# The <hash> is designed for swapping.
# Currently we only support one production environment,
# but when deploying a new production, we have to stopped the
# old first. We have to reduce the time between the old was stopped
# and the new was started, when the service was available.
# Therefore, we learn from the double buffering technology,
# the currently production environment was deployed under
# production/<hash1>/, and the new under production/<hash2>/.
# After the dependencies of the new one was installed, stop the
# old one and continue the following processes.
# Since the dependencies resolving process is usually the slowest,
# we reduce a great amount time of service unavaliability.

---

- name: "{{ project_name }} {{ stage }}"
  hosts: web
  remote_user: root
  vars:
    # postfix: "{{ ansible_date_time.iso8601_basic_short }}" # 20170727T220900
    owner: www-data
    group: www-data
    dirname: "{{ postfix }}"
    _project_: "{{ project_name }}/{{ stage }}"
    project_fullname: "{{ project_name }}-{{ stage }}"
    project_prefix: "/var/www/{{ _project_ }}"
    log_prefix: "/var/log/{{ _project_ }}"
    media_prefix: "/var/media/{{ _project_ }}"
    static_prefix: "/var/static/{{ _project_ }}"
    venv_prefix: "/var/lib/venv/{{ _project_ }}"
    local_settings_prefix: "/var/lib/local_settings/{{ _project_ }}"
    supervisor_prefix: "/etc/supervisord.d"
    supervisor_ext: "ini"
    supervisor_conf: "{{ supervisor_prefix }}/{{ project_fullname }}.{{ supervisor_ext }}"
    dest: "{{ project_prefix }}/{{ dirname }}"
    log_path: "{{ log_prefix }}/{{ postfix }}"
    media_path: "{{ media_prefix }}"
    static_path: "{{ static_prefix }}"
    venv_path: "{{ venv_prefix }}/{{ postfix }}"
    local_settings_path: "{{ local_settings_prefix }}"
    venv_gunicorn: "{{ venv_path }}/bin/gunicorn"
  vars_files:
    - vars.yml
  tasks:
    - block:
        - name: "Check supervisor"
          stat:
            path: /etc/supervisor
          register: result
          ignore_errors: yes
        - name: "Set supervisor facts"
          set_fact:
            supervisor_prefix: "/etc/supervisor/conf.d"
            supervisor_ext: "conf"
            supervisor_conf: "{{ supervisor_prefix }}/{{ project_fullname }}.{{ supervisor_ext }}"
        - name: "Create dirs"
          file:
            path: "{{ item }}"
            state: directory
            recurse: yes
          loop:
            - "{{ dest }}"
            - "{{ log_path }}"
            - "{{ media_path }}"
            - "{{ static_path }}"
        - name: "Copy code"
          synchronize:
            src: "{{ project_src }}/"
            dest: "{{ dest }}"
            archive: true
            delete: true
            rsync_opts:
              - "--exclude=.git/"
        - name: "Retrive local settings"
          synchronize:
            src: "{{ local_settings_path }}/"
            dest: "{{ dest }}"
            archive: true
            delete: false
        - name: "Install python dependencies"
          pip:
            virtualenv: "{{ venv_path }}"
            virtualenv_python: python3
            requirements: "{{ dest }}/requirements.txt"
        - name: "Change files' attributes"
          file:
            path: "{{ item }}"
            owner: "{{ owner }}"
            group: "{{ group }}"
            recurse: yes
          loop:
            - "{{ dest }}"
            - "{{ log_path }}"
            - "{{ media_path }}"
            - "{{ static_path }}"
        - name: "Make manage.py executable"
          file:
            path: "{{ dest }}/manage.py"
            mode: "+x"
        - name: "Stop running service"
          supervisorctl:
            name: "{{ project_fullname }}"
            state: absent
          ignore_errors: yes
        - name: "Run migrations"
          django_manage:
            command: migrate
            app_path: "{{ dest }}"
            virtualenv: "{{ venv_path }}"
          become: yes
          become_user: "{{ owner }}"
        - name: "Collect static files"
          django_manage:
            command: collectstatic
            app_path: "{{ dest }}"
            virtualenv: "{{ venv_path }}"
          become: yes
          become_user: "{{ owner }}"
        - name: "Generate supervisor config"
          template:
            src: template/supervisor.conf.j2
            dest: "{{ supervisor_conf }}"
        - name: "Run django application"
          supervisorctl:
            name: "{{ project_fullname }}"
            state: restarted
      rescue:
        - name: "Cleanup venv"
          file:
            state: absent
            path: "{{ venv_path }}"
        - name: "Aborting"
          fail: msg="Deploy failed"
      always:
        - name: "Cleanup old code"
          shell: "find {{ project_prefix }} -mindepth 1 -maxdepth 1 ! -name '{{ dirname }}' | xargs rm -rf"
